"0","library(shiny)"
"0","library(tidyverse)"
"0","beer_df = read.csv(""Beers.csv"")"
"0","breweries_df = read.csv(""Breweries.csv"")"
"0","#data cleaning"
"0","colnames(breweries_df) <- c(""Brewery_id"", ""Brewery"", ""City"", ""State"")"
"0","breweries_df$State <- str_replace_all(breweries_df$State, "" "", """")"
"0","#dataset merge"
"0","beer_df = merge(beer_df, breweries_df, by=""Brewery_id"")"
"0","#duplicate beers were found, cleaning"
"0","beer_df <- beer_df %>% distinct(Name, ABV, IBU, Style, Ounces, .keep_all=TRUE)"
"0","#removal of NA values"
"0","beer_df = beer_df %>% filter(!is.na(ABV))"
"0","ui <- fluidPage("
"0","  "
"0","  # App title ----"
"0","  titlePanel(""Histogram of Beer ABV Ratings""),"
"0","  br(),"
"0","  fluidRow("
"0","    column(4,"
"0","      hr(),"
"0","      verbatimTextOutput('out3'),"
"0","      selectInput('in3', 'Options', c(""All"", state.name), multiple=TRUE, selectize=FALSE)"
"0","    )"
"0","  ),"
"0","  "
"0","  "
"0","  # Sidebar layout with input and output definitions ----"
"0","  sidebarLayout("
"0","    "
"0","    # Sidebar panel for inputs ----"
"0","    sidebarPanel("
"0","      "
"0","      # Input: Select the random distribution type ----"
"0","      radioButtons(""ptype"", ""Plot type:"","
"0","                   c(""Histogram"" = ""hist"","
"0","                     ""Box Plot"" = ""box"")),"
"0","      # br() element to introduce extra vertical spacing ----"
"0","      br(),"
"0","      "
"0","      #Input: Slider for the number of bins ----"
"0","      sliderInput(inputId = ""bins"","
"0","                  label = ""Number of bins:"","
"0","                  min = 1,"
"0","                  max = 50,"
"0","                  value = 30)"
"0","    ),# end sidebarPanel"
"0","    "
"0","    # Main panel for displaying outputs ----"
"0","    mainPanel("
"0","      "
"0","      # Output: Histogram ----"
"0","      plotOutput( ""plot"")"
"0","      "
"0","    ) ) ) # end main, sidebarLayout, fluid page"
"0","# Define server logic required to draw a histogram ----"
"0","server <- function(input, output) {"
"0","  "
"0","  "
"0","  "
"0","  # Histogram of the Old Faithful Geyser Data ----"
"0","  # with requested number of bins"
"0","  # This expression that generates a histogram is wrapped in a call"
"0","  # to renderPlot to indicate that:"
"0","  #"
"0","  # 1. It is ""reactive"" and therefore should be automatically"
"0","  #    re-executed when inputs (input$bins) change"
"0","  # 2. Its output type is a plot"
"0","  output$plot <- renderPlot({"
"0","    "
"0","    if(input$ptype==""hist""){"
"0","      if(input$in3 == ""All""){"
"0","        x    <- beer_df$ABV"
"0","        bins <- seq(min(x), max(x), length.out = input$bins + 1)"
"0","    "
"0","        hist(x, breaks = bins, col = ""#75AADB"", border = ""white"","
"0","          xlab = ""ABV"","
"0","          main = ""Histogram of beer ABV ratings"")"
"0","      }else{"
"0","          beer_temp = beer_df %>% filter(beer_df$State == input$in3)"
"0","          x    <- beer_df$ABV"
"0","          bins <- seq(min(x), max(x), length.out = input$bins + 1)"
"0","    "
"0","          hist(x, breaks = bins, col = ""#75AADB"", border = ""white"","
"0","          xlab = ""ABV"","
"0","          main = ""Histogram of beer ABV ratings"")"
"0","      }"
"0","    }else{"
"0","    x    <- beer_df$ABV"
"0","    boxplot(x, main=""ABV of Beers"", ylab=""ABV"")"
"0","      "
"0","    }"
"0"," "
"0","  })"
"0","  "
"0","}"
"0","shinyApp(ui, server)"
"2","
Listening on http://127.0.0.1:3499
"
"2","
"
